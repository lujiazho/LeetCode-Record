###############################################################################################
# 之前做过，有点忘记了，主要是上次定义没有设定清楚
# dp[i][j]准确定义是：以第i个数结尾且等差为j的弱等差子序列个数(弱就表示长度为2也算)
###########
# 时间复杂度：O(n^2)
# 空间复杂度：O(n^2)
###############################################################################################
class Solution:
    def numberOfArithmeticSlices(self, nums: List[int]) -> int:
        dp = [defaultdict(int) for _ in range(len(nums))] # dp[i][j]: 以i结尾且等差为j的子序列个数(准确地说，我们算的是弱等差子序列的数量)
        res = 0
        for i in range(1, len(nums)):
            for j in range(i):
                diff = nums[i] - nums[j]
                res += dp[j][diff] # 在加上弱等差子序列的个数前就得加到res里，才不会多算
                dp[i][diff] += dp[j][diff] + 1 # 这个+1就是加上了只有两个数的子序列的情况，循环i前面所有数，最终以每个j结尾的数和i都成为能构成长度为2的子序列
        return res